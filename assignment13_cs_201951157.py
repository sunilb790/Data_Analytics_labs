# -*- coding: utf-8 -*-
"""Assignment13_CS_201951157.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MZTsEaL17sDZoVr4H68aJI0W0oH146M4

#CS312 DATA ANALYTICS AND VISUALIZATION
#SUNIL BHENSPALIYA
#201951157 (CSE)
#LAB ASSIGNMENT :- 13
"""

import pandas as pd
import random
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from scipy import stats
import statsmodels.api as sm
from statsmodels.formula.api import ols

df_1=pd.read_csv('/content/sample_data/cookie_cats (2).csv');
df_1

tmp=df_1.set_index("version")
data2=tmp.loc["gate_30"].reset_index()
data2["gate_40"]=tmp.loc["gate_40"].reset_index()["sum_gamerounds"]
data2["gate_30"]=tmp.loc["gate_30"].reset_index()["sum_gamerounds"]
data2=data2.iloc[:,5:]
data2

"""# Derivation using Observed means method """

observed_variance = df_1.groupby('version').mean().var()[0]
print('Observed means :', df_1.groupby('version').mean().values.ravel())
print('Variance :', observed_variance)

def perm_test(df):
    df = df.copy()
    df['sum_gamerounds'] = np.random.permutation(df['sum_gamerounds'].values)
    return df.groupby('sum_gamerounds').mean().var()[0] # calculation of variance
perm_variance = [perm_test(df_1) for _ in range(3000)]

print('Pr(Prob) is', np.mean([var > observed_variance for var in perm_variance]))

"""# Using stats.f.oneway"""

fvalue, pvalue = stats.f_oneway(data2['gate_30'],data2['gate_40'])
print("Pvalue using stats.f.oneway function",pvalue)
print("Fvalue using stats.f.oneway function",fvalue)

"""# Derivation using F-stastic"""

mu=data2.mean()
gmu=mu.mean()
print("Group wise mean of datas is ", mu.values)
print("Grand mean of data is ", gmu)

# Degree of freedom
degf=89398 # (total number element in a group -1)*number of groups ((44700-1)*2=89398)
gdegf=1 # total number of treatments -1 (2-1=1)

# Sum of Squares (SS) of error, group wise
tmp=data2-mu
tmp=tmp**2
tmp=tmp.sum().sum()
SS=1*tmp
tmp

# Mean of Sum of squares of error group wise
MSS=SS/degf 
MSS

# Sum of squares of error for whole data
GSS=((mu-gmu)**2).sum()*2
tmp=(mu-gmu)**2
GSS

# Mean of Sum of squares of error group wise
GMSS=GSS/gdegf 
GMSS

# Fvalue
Fvalue=GMSS/MSS
Fvalue

def perm_test(df):
    df = df.copy()
    df['sum_gamerounds'] = np.random.permutation(df['sum_gamerounds'].values)
    tmp=df.set_index("version")
    df2=tmp.loc["gate_30"].reset_index()
    df2["gate_40"]=tmp.loc["gate_40"].reset_index()["sum_gamerounds"]
    df2["gate_30"]=tmp.loc["gate_30"].reset_index()["sum_gamerounds"]
    df2=data2.iloc[:,5:]
    mu=df2.mean()
    SS=((df2-mu)**2).sum().sum()
    MSS=SS/degf
    GSS=((mu-gmu)**2).sum()*2
    GMSS=GSS/gdegf 
    Fvalue_perm=GMSS/MSS
    return Fvalue_perm
perm_variance = [perm_test(df_1) for _ in range(3000)]

print('Pr(Prob) is', np.mean([fv > Fvalue for fv in perm_variance]))

"""# Derivation using Anova table"""

model = ols("sum_gamerounds ~ version", data=df_1).fit()
anova_table = sm.stats.anova_lm(model, typ=2)
anova_table

"""# Observations & Result
- As we can observe that p-value is very higher than than the alpha (i.e. 0.05) in all the derived techniques(cannot be derived through some techniques), so We should not reject the null hypothesis
"""